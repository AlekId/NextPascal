// Common partTypeT getVar0(...){TypeT Var0;...return Var0;}...TypeT getVar1(...){TypeT Var1;...return Var1;}...TypeT getVar2(...){TypeT Var2;...return Var2;}...TypeT getVarN(...){TypeT VarN;...return VarN;}...void doIf_Var1EqVar0(...){...}...void doIf_Var2EqVar0(...){...}...void doIf_VarNEqVar0(...){...}...void doIf_DefaultVar0(...){...}...TypeT Vars_TypeT[N];...Vars_TypeT[0] = getVar0(...);...Vars_TypeT[1] = getVar1(...);...Vars_TypeT[2] = getVar2(...);...Vars_TypeT[N] = getVarN(...);...// var-var switch templateswitch(Vars_TypeT[0]){case Vars_TypeT[1]: doIf_Var1EqVar0(...);break;case Vars_TypeT[2]: doIf_Var2EqVar0(...);break;...case Vars_TypeT[N]: doIf_VarNEqVar0(...);break;default: doIf_DefaultVar0(...);break;}// var-cons switch template...Var0_TypeT = getVar0(...);...int TypeT_TypeT_2_Int(TypeT VarSwitch_TypeT, TypeT VarCase_TypeT){int Result;...return Result;}...i = getRundomI(N);...switch(TypeT_TypeT_2Int(Vars_TypeT[0], Vars_TypeT[i])){case 1: doIf_Var1EqVar0(...);break;case 2: doIf_Var2EqVar0(...);break;...case N: doIf_VarNEqVar0(...);break;default: doIf_DefaultVar0(...);break;}